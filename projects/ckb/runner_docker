#!/usr/bin/env bash
set -ex

BUILD_SCRIPT=$(basename -- "$1")
INPUT=$(realpath $2)
OUTPUT=$(realpath $3)
VERSION=$4

# Inspired from https://stackoverflow.com/a/246128
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

DOCKER_TAG="ckb-bootstrapper_ckb_local-docker-guix_1"

cleanup() {
  set +ex

  docker stop ${DOCKER_TAG}__1 > /dev/null 2>&1
  docker rm -f ${DOCKER_TAG}__1 > /dev/null 2>&1
  docker image rm -f ${DOCKER_TAG}__0 > /dev/null 2>&1
}
trap cleanup EXIT

if [ -z "$(docker images -q $DOCKER_TAG 2> /dev/null)" ]; then
  # Build local docker image for running guix
  pushd $SCRIPT_DIR/_docker
  docker build . -t ${DOCKER_TAG}__0
  # Run guix time-machine once so we can cache guix pull data, it
  # saves us the necessity of rebuilding guix again and again. But
  # the tradeoff is we need to bump docker tag name everytime we
  # update dependencies.
  docker run --name ${DOCKER_TAG}__1 $DOCKER_RUN_ARGS \
    --privileged \
    -v ${SCRIPT_DIR}:/working/scripts:ro \
    ${DOCKER_TAG}__0 \
    guix time-machine \
      --channels=/working/scripts/_guix/channels.scm -- \
        shell $GUIX_SHELL_ARGS \
          --manifest=/working/scripts/_guix/manifest.scm \
          --container \
          --network \
          --preserve='PROXY$' \
          --expose=/etc/ssl/certs/ \
          --no-cwd \
          --expose=/working/scripts=/working/scripts \
          --user=builder -- \
            bash -c 'rustc --version'
  docker commit ${DOCKER_TAG}__1 ${DOCKER_TAG}
  popd
fi

# Kickoff guix build inside docker container
docker run --rm $DOCKER_RUN_ARGS \
  --privileged \
  -v ${INPUT}:/working/actual_ckb:ro \
  -v ${OUTPUT}:/working/actual_out \
  -v ${SCRIPT_DIR}:/working/scripts:ro \
  $DOCKER_TAG \
    /working/scripts/_utils/permission-wrapper.sh \
    guix time-machine \
      --channels=/working/scripts/_guix/channels.scm -- \
        shell $GUIX_SHELL_ARGS \
          --manifest=/working/scripts/_guix/manifest.scm \
          --container \
          --network \
          --preserve='PROXY$' \
          --expose=/etc/ssl/certs/ \
          --no-cwd \
          --expose=/working/ckb=/working/ckb \
          --share=/working/out=/working/out \
          --expose=/working/scripts=/working/scripts \
          --user=builder -- \
            bash \
              /working/scripts/$BUILD_SCRIPT \
              /working/ckb \
              /working/out/ \
              $VERSION

# Update file permissions to current user in $OUTPUT folder, in case docker
# sets file permissions to sudo user
docker run --rm $DOCKER_RUN_ARGS \
  -e UID=`id -u` -e GUI=`id -g` \
  -v ${OUTPUT}:/working/out \
  $DOCKER_TAG \
    sh -c 'chown -R -f $UID:$GID /working/out'
